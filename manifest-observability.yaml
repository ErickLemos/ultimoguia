apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: default

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: default
data:
  prometheus.yml: |
    global:
      scrape_interval: 1s
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      - job_name: 'ultimoguia-backend'
        metrics_path: /actuator/prometheus
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          # Mantém apenas os pods com a label 'app: backend'
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: backend

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v2.48.1
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config
        - name: prometheus-storage-volume
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: default
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 9090
      nodePort: 30090
---
# manifest-grafana.yaml

# 1. Armazenamento Permanente para os dados do Grafana (dashboards, etc.)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce # Padrão para um único pod
  resources:
    requests:
      storage: 1Gi # Tamanho do volume. Suficiente para um ambiente local.

---
# 2. ConfigMap para provisionar o Data Source do Prometheus automaticamente
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: default
data:
  datasources.yaml: |-
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        # URL do serviço do Prometheus que criamos anteriormente
        url: http://prometheus-service:8080
        access: proxy
        isDefault: true
        editable: true

---
# 3. ConfigMap para provisionar um Dashboard inicial
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: default
data:
  # Define o provedor de dashboards
  dashboards.yaml: |-
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default

  # Define o JSON do dashboard
  ultimoguia-dashboard.json: |-
    {
      "__inputs": [],
      "__requires": [],
      "annotations": { "list": [] },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "datasource": "Prometheus",
          "title": "JVM Memory Used",
          "type": "graph",
          "gridPos": { "h": 8, "w": 12, "x": 0, "y": 0 },
          "targets": [
            {
              "expr": "jvm_memory_used_bytes{job='ultimoguia-backend'}",
              "legendFormat": "{{area}} - {{kubernetes_pod_name}}",
              "refId": "A"
            }
          ]
        },
        {
          "datasource": "Prometheus",
          "title": "HTTP Requests Total",
          "type": "graph",
          "gridPos": { "h": 8, "w": 12, "x": 12, "y": 0 },
          "targets": [
            {
              "expr": "rate(http_server_requests_seconds_count{job='ultimoguia-backend'}[5m])",
              "legendFormat": "{{uri}} - {{status}}",
              "refId": "A"
            }
          ]
        }
      ],
      "refresh": "10s",
      "schemaVersion": 16,
      "style": "dark",
      "tags": [],
      "templating": { "list": [] },
      "time": { "from": "now-15m", "to": "now" },
      "timepicker": {},
      "timezone": "browser",
      "title": "UltimoGuia App",
      "version": 0
    }

---
# 4. Deployment do Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.2.2 # Versão estável do Grafana
          ports:
            - containerPort: 3000
          volumeMounts:
            # Monta o volume persistente para os dados do Grafana
            - name: grafana-storage
              mountPath: /var/lib/grafana
            # Monta o ConfigMap do data source
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            # Monta o ConfigMap dos dashboards
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards/default
      volumes:
        # Define o volume a partir do PVC
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        # Define o volume a partir do ConfigMap de data sources
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        # Define o volume a partir do ConfigMap de dashboards
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards

---
# 5. Serviço para expor a UI do Grafana
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: default
spec:
  selector:
    app: grafana
  type: NodePort
  ports:
    - protocol: TCP
      port: 3000       # Porta do serviço dentro do cluster
      targetPort: 3000 # Porta do container do Grafana
      nodePort: 30091  # Porta para acessar externamente (diferente da do Prometheus)